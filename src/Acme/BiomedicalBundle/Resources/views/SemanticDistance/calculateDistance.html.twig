{% extends 'AcmeBiomedicalBundle::main.html.twig' %}
{% block  title %}
{% trans %}distance.entre.deux.concepts{% endtrans %}
{% endblock %}
{% block content %}
{{ parent() }}
{% if distances.getOntology() is not null %}
<!-- Cas où l'include=all a été inséré par le requêteur -->
<p>
<span id="concepts">
{% trans %}distances.entre{% endtrans %}
<a href="{{ distances.getConcept1().getFullId() }}">
{{ distances.getTerm1().getName() }} 
</a>
<a href="{{  path('acme_biomedical_link_to_bioportal') }}?ontology_acronym={{ distances.getOntology().getVirtualOntologyId() }}
			&full_id={{ distances.getEncodedFullIdConcept1() }}">
<button class="home_button">{% trans %}lien.vers.BioPortal{% endtrans %}</button>
</a>
{% trans %}et{% endtrans %} 
<a href="{{ distances.getConcept2().getFullId() }}">
{{ distances.getTerm2().getName() }}
</a>
<a href="{{  path('acme_biomedical_link_to_bioportal') }}?ontology_acronym={{ distances.getOntology().getVirtualOntologyId() }}
			&full_id={{ distances.getEncodedFullIdConcept2() }}">
<button class="home_button">{% trans %}lien.vers.BioPortal{% endtrans %}</button>
</a>
</span>
</p>
{% elseif distances.getConcept1() is not null %}
<!-- Cas où l'include=concept a été inséré par le requêteur -->
<p>
<span id="concepts">
{% trans %}distances.entre{% endtrans %}
<a href="{{ distances.getConcept1().getFullId() }}">
{{ distances.getTerm1().getName() }} 
</a>
{% trans %}et{% endtrans %} 
<a href="{{ distances.getConcept2().getFullId() }}">
{{ distances.getTerm2().getName() }}
</a>
</span>
</p>
{% else %}
<!-- Cas par défaut l'include n'a pas été inséré par le requêteur -->
<p>
<span id="concepts">
{% trans %}distances.entre{% endtrans %} {{ distances.getTerm1().getName() }} {% trans %}et{% endtrans %} {{ distances.getTerm2().getName() }}
</span>
</p>
{% endif %}
{% trans %}distance.de.Lin{% endtrans %}: {{ distances.getSemanticDistance().getSimLin() }}
	<br>
	{% trans %}distance.de.Wu.Palmer{% endtrans %}: {{
	distances.getSemanticDistance().getSimWuPalmer() }}
	<br>
	{% trans %}distance.de.Resnik{% endtrans %}: {{ distances.getSemanticDistance().getSimResnik() }}
	<br>
	{% trans %}distance.de.Schlicker{% endtrans %}: {{
	distances.getSemanticDistance().getSimSchlicker() }}
	<br>
{% endblock %}